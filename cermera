#####

import sys
import gi
import os
import time
gi.require_version('Gst', '1.0')
from gi.repository import Gst, GObject

loop = GObject.MainLoop()
GObject.threads_init()
Gst.init(None)

# Cameras Env Path
front_cam_path = os.environ['FRONT_CAM']
left_cam_path = os.environ['LEFT_CAM']
right_cam_path = os.environ['RIGHT_CAM']
rear_cam_path = os.environ['REAR_CAM']
thermal_cam_path = os.environ['THERMAL_CAM']

class VirtualCamera():
    def __init__(self):

        # Set front cam pipeline
        if os.path.exists("/dev/front_cam") :
            self.front_cam_pipeline = "v4l2src device=/dev/front_cam io-mode=dmabuf ! videorate ! video/x-raw, width=640,height=480, framerate=30/1 ! v4l2sink device="+front_cam_path
        else :
            self.front_cam_pipeline = "videotestsrc ! videorate ! video/x-raw, width=640,height=480, framerate=30/1 ! v4l2sink device="+front_cam_path

        # Set left cam pipeline
        if os.path.exists("/dev/left_cam") :
            self.left_cam_pipeline = "v4l2src device=/dev/left_cam io-mode=dmabuf ! videorate ! video/x-raw, width=640,height=480, framerate=30/1 ! v4l2sink device="+left_cam_path
        else :
            self.left_cam_pipeline = "videotestsrc ! videorate ! video/x-raw, width=640,height=480, framerate=30/1 ! v4l2sink device="+left_cam_path

        # Set right cam pipeline
        if os.path.exists("/dev/right_cam") :
            self.right_cam_pipeline = "v4l2src device=/dev/right_cam io-mode=dmabuf ! videorate ! video/x-raw, width=640,height=480, framerate=30/1 ! v4l2sink device="+right_cam_path
        else :
            self.right_cam_pipeline = "videotestsrc ! videorate ! video/x-raw, width=640,height=480, framerate=30/1 ! v4l2sink device="+right_cam_path

        # Set rear cam pipeline
        if os.path.exists("/dev/rear_cam") :
            self.rear_cam_pipeline = "v4l2src device=/dev/rear_cam io-mode=dmabuf ! videorate ! video/x-raw, width=640,height=480, framerate=30/1 ! v4l2sink device="+rear_cam_path
        else :
            self.rear_cam_pipeline = "videotestsrc ! videorate ! video/x-raw, width=640,height=480, framerate=30/1 ! v4l2sink device="+rear_cam_path

        # Set thermal cam pipeline
        # if os.path.exists("/dev/thermal_cam") :
        #     self.thermal_cam_pipeline = "v4l2src device=/dev/video0 io-mode=dmabuf ! videorate ! video/x-raw, width=160,height=120, framerate=30/1 ! v4l2sink device="+thermal_cam_path
        # else :
        #     self.thermal_cam_pipeline = "videotestsrc ! videorate ! video/x-raw, width=160,height=120, framerate=30/1 ! v4l2sink device="+thermal_cam_path


        
        print(self.front_cam_pipeline)
        
        self.front = Gst.parse_launch(self.front_cam_pipeline)
	
        self.front_bus = self.front.get_bus()
        self.front_bus.add_signal_watch()
        self.front_bus.connect('message::error', self.on_state_error)
        #self.front_bus.connect('message::state-changed', self.on_state_changed)
        self.front.set_state(Gst.State.PLAYING)


        
        print(self.left_cam_pipeline)
        self.left = Gst.parse_launch(self.left_cam_pipeline)
	
        self.left_bus = self.front.get_bus()
        self.left_bus.add_signal_watch()
        self.left_bus.connect('message::error', self.on_state_error)
        #self.front_bus.connect('message::state-changed', self.on_state_changed)
        self.left.set_state(Gst.State.PLAYING)

        self.right = Gst.parse_launch(self.right_cam_pipeline)
	
        self.right_bus = self.front.get_bus()
        self.right_bus.add_signal_watch()
        self.right_bus.connect('message::error', self.on_state_error)
        #self.front_bus.connect('message::state-changed', self.on_state_changed)
        self.right.set_state(Gst.State.PLAYING)
        
    def on_state_error(self,bus, msg):
        err,dbg = msg.parse_error()
        print(self.front_bus.name == bus.name)
        print(dbg)
        ret = self.front.get_state(timeout=0) 
        print(ret)
        # re-launch
        #self.front.set_state(Gst.State.NULL)
        
        #time.sleep(1)
        #self.front = None

        #self.front = Gst.parse_launch(self.front_cam_pipeline)
        # setting signal on function
        #self.front_bus = self.front.get_bus()
        #self.front_bus.add_signal_watch()
        #self.front_bus.connect('message::error', self.on_state_error)
        #self.front_bus.connect('message::state-changed', self.on_state_changed)
	
       # while os.path.exists("/dev/test_cam") == False:
       #     print("Not exist test_cam");
       #     time.sleep(1)
       # self.front.set_state(Gst.State.PLAYING)
        sys.exit('streaming error')
        

    def on_state_changed(self,bus, msg):

        old, new, pending = msg.parse_state_changed()
        print(old, new, pending)
        
if __name__ == '__main__':
    try:
        VirtualCamera()
        loop.run()
    except:
        print("python error!")
